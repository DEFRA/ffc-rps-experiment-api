{
	"info": {
		"_postman_id": "21c866f7-23c0-49d5-a488-4341c43d1eff",
		"name": "Defra",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "36253907"
	},
	"item": [
		{
			"name": "future-rps-endpoints",
			"item": [
				{
					"name": "parameterisedAreaCalculation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response value matches Available Area expected value\", function () {",
									"         var jsonData = pm.response.json();",
									"         pm.expect(jsonData).to.eql(pm.iterationData.get(\"expectedAvailableArea\"));",
									" });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"applicationFor\": \"{{applicationFor}}\",\n  \"landParcel\": {\n    \"area\": {{landparcelArea}},\n    \"existingAgreements\": [\n      { \"code\": \"{{existingAgreementsCode1}}\",\n        \"area\": {{existingAgreementsArea1}} \n        },\n      { \"code\": \"{{existingAgreementsCode2}}\",\n        \"area\": {{existingAgreementsArea2}} \n        }\n    ]\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{env}}/available-area",
							"protocol": "http",
							"host": [
								"{{env}}"
							],
							"path": [
								"available-area"
							]
						}
					},
					"response": []
				},
				{
					"name": "update matrix",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"LIG1\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{env}}/available-area/matrix",
							"protocol": "http",
							"host": [
								"{{env}}"
							],
							"path": [
								"available-area",
								"matrix"
							]
						}
					},
					"response": []
				},
				{
					"name": "action",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check if response contains an array\", () => {",
									"    pm.expect(jsonData).to.be.an(\"array\");",
									"});",
									"",
									"pm.test(\"Check if response array size is 3\", () => {",
									"    pm.expect(Object.keys(pm.response.json()).length).to.eql(3);",
									"});",
									"",
									"pm.test(\"Check properties of the array\", ",
									"() => {",
									"    pm.expect(jsonData[0]).to.have.property(\"code\");",
									"    pm.expect(jsonData[0]).to.have.property(\"description\");",
									"    pm.expect(jsonData[0]).to.have.property(\"payment\");",
									"",
									"});",
									"",
									"pm.test(\"Response value matches Available Area expected value\", function () {",
									"         console.log(jsonData)",
									"         pm.expect(jsonData[0].code).to.contain(\"SAM1\");",
									"         pm.expect(jsonData[0].description).to.contain(\"Assess soil, test soil organic matter and produce a soil management plan\");",
									"         pm.expect(jsonData[0].payment.amountPerHectare).to.eql(5.8);",
									"         pm.expect(jsonData[0].payment.additionalPaymentPerAgreement).to.eql(95);",
									" });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{env}}/action?parcel-id=1234&land-use-codes=AC32",
							"protocol": "http",
							"host": [
								"{{env}}"
							],
							"path": [
								"action"
							],
							"query": [
								{
									"key": "parcel-id",
									"value": "1234"
								},
								{
									"key": "land-use-codes",
									"value": "AC32"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "land parcel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check properties of the array\", () => {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property(\"parcelId\");",
									"    pm.expect(jsonData[0]).to.have.property(\"osSheetId\");",
									"    pm.expect(jsonData[0]).to.have.property(\"landUseList\");",
									"    pm.expect(jsonData[0]).to.have.property(\"area\");",
									"    pm.expect(jsonData[0]).to.have.property(\"attributes\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{env}}/land-parcel/200599768",
							"protocol": "http",
							"host": [
								"{{env}}"
							],
							"path": [
								"land-parcel",
								"200599768"
							]
						}
					},
					"response": []
				},
				{
					"name": "payment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check properties of the array\", () => {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0]).to.have.property(\"action-code\");",
									"    pm.expect(jsonData[0]).to.have.property(\"payment\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \n    \"actions\": [\n    { \"action-code\": \"SAM2\", \n      \"hectares-applied-for\": 1.1 \n        }\n    ], \n      \"land-use-codes\": [\"AC32\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{env}}/payment-calculation",
							"protocol": "http",
							"host": [
								"{{env}}"
							],
							"path": [
								"payment-calculation"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add action rule",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"is-less-than-max-parcel-area\",\n    \"config\": { \"maxArea\": 25 }\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{env}}/action/GRH1/rule",
							"protocol": "http",
							"host": [
								"{{env}}"
							],
							"path": [
								"action",
								"GRH1",
								"rule"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update action rule",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \"config\": { \"maxArea\": 25 } }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{env}}/action/GRH1/rule/is-less-than-max-parcel-area",
							"protocol": "http",
							"host": [
								"{{env}}"
							],
							"path": [
								"action",
								"GRH1",
								"rule",
								"is-less-than-max-parcel-area"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete action rule",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{env}}/action/GRH1/rule/is-less-than-max-parcel-area",
							"protocol": "http",
							"host": [
								"{{env}}"
							],
							"path": [
								"action",
								"GRH1",
								"rule",
								"is-less-than-max-parcel-area"
							]
						}
					},
					"response": []
				},
				{
					"name": "action validation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const expectedIsValid = String(pm.iterationData.get(\"expectedIsValid\"));",
									"",
									"pm.test(\"Is valid assertion\", () => {",
									"    const deserialisedResponse = pm.response.json();",
									"    console.log(\"Test Data actionCode value: \" + pm.iterationData.get(\"actionCode\"))",
									"    console.log(\"Test Data actionArea value: \" + pm.iterationData.get(\"actionArea\"))",
									"    console.log(\"Test Data landparcelArea value: \" + pm.iterationData.get(\"landparcelArea\"))",
									"    console.log(\"Test Data moorlandLineStatus value: \" + pm.iterationData.get(\"moorlandLineStatus\"))",
									"    console.log(\"Test Data landUseCode value: \" + pm.iterationData.get(\"landUseCode\"))",
									"    console.log(\"Test Data expectedIsValid value:\"  + pm.iterationData.get(\"expectedIsValid\"))",
									"    for (const key in deserialisedResponse) {",
									"        if (deserialisedResponse.hasOwnProperty(key)) {",
									"        console.log(`Json Response ${key}: ${deserialisedResponse[key]}`);",
									"        }",
									"    }",
									"    console.log(\"Json Response expected isValidCombination value:\" + String(deserialisedResponse.isValidCombination))",
									"    pm.expect(String(deserialisedResponse.isValidCombination)).to.eql(expectedIsValid);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"actions\": [\n        {\n            \"actionCode\": \"{{actionCode}}\",\n            \"quantity\": \"{{actionArea}}\",\n            \"description\": \"test\"\n        }\n    ],\n    \"landParcel\": {\n        \"parcelId\": \"10170\",\n        \"area\": \"{{landparcelArea}}\",\n        \"osSheetId\": \"SU5167\",\n        \"moorlandLineStatus\": \"{{moorlandLineStatus}}\",\n        \"agreements\": [],\n        \"landUseCodes\": [\n            \"{{landUseCode}}\"\n        ]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{env}}/action-validation",
							"protocol": "http",
							"host": [
								"{{env}}"
							],
							"path": [
								"action-validation"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "env",
			"value": "localhost:3000"
		}
	]
}